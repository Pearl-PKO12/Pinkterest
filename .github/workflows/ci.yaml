name: CI/CD Pipeline

on:
  push:
    branches:
      - workflow
  pull_request:
    branches:
      - workflow

permissions:
  id-token: write   
  contents: read  
  checks: write

jobs:
  test:
    runs-on: ubuntu-latest

    env: 
      JWT_ACCESS_SECRET: "JWT_ACCESS_SECRET"
      JWT_ACCESS_TOKEN_EXPIRES_IN: "1h"
      JWT_REFRESH_SECRET: "JWT_REFREST_SECRET"
      JWT_REFRESH_TOKEN_EXPIRES_IN: "5H"
      MAIL_FROM: "example@gmail.com"
      RESET_TOKEN_SECRET: "RESET_TOKEN_SECRET"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - uses: pnpm/action-setup@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
          cache: "pnpm"
          cache-dependency-path: '**/pnpm-lock.yaml'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Generate prisma schema 
        shell: bash 
        run: npx prisma generate --schema ./packages/schema/prisma/schema.prisma
    
      - name: Run tests 
        run: pnpm --filter=server test:e2e
      
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()  
        with:
          name: Test results            
          path: "apps/server/reports/junit.xml"   
          reporter: jest-junit        

  web:
    needs: test
    uses: "./.github/workflows/docker-build.yaml"
    with: 
      docker_file_path: ./apps/web/Dockerfile
      container_name: web 
      service_name: frontend
    secrets:
      ECR_REPOSITORY: ${{ secrets.ECR_WEB_REPOSITORY }}
      ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      REGION: ${{ secrets.REGION }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME}}
      EC2_URL: ${{secrets.EC2_URL}}
    
  server:
    needs: test
    uses: "./.github/workflows/docker-build.yaml"
    with: 
      docker_file_path: ./apps/server/DockerfileBuild
      container_name: server 
      service_name: backend
    secrets:
      ECR_REPOSITORY: ${{ secrets.ECR_SERVER_REPOSITORY }}
      ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      REGION: ${{ secrets.REGION }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME}}
      EC2_URL: ${{secrets.EC2_URL}}



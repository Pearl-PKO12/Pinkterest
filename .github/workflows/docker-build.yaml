name: "Build and Deploy"

on: 
  workflow_call: 
    inputs:
      docker_file_path:
        required: true
        type: string
      service_name:
        required: true
        type: string
      build_args:
        required: false
        type: string
        default: ''
      container_name:
        required: true
        type: string
    secrets: 
      ECR_REPOSITORY:
        required: true
      ACCESS_KEY:
        required: true
      SECRET_KEY: 
        required: true
      REGION: 
        required: true
      EC2_SSH_KEY: 
        required: true
      EC2_USERNAME: 
        required: true
      EC2_IP: 
        required: true
      CONTAINER_ENV_VARIABLES:
        required: false
      GITHUB_TOKEN: 
        required: true



jobs: 
  build:
    permissions: 
      id-token: write 
      contents: read
    runs-on: ubuntu-latest
    name: Build ${{ inputs.container_name}}

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ inputs.service_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ inputs.service_name }}-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
        
          role-to-assume: ${{secrets.ROLE_TO_ASSUME}}
          # aws-region: ${{secrets.REGION}}
          # aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          # aws-secret-access-key: ${{ secrets.SECRET_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      
      - name: Set Short Github SHA
        id: vars
        shell: bash
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          build-args: ${{ inputs.build_args }}
          file: ${{ inputs.docker_file_path }}
          push: true
          provenance: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{secrets.REPOSITORY_ALIAS}}/${{ secrets.ECR_REPOSITORY }}:${{ steps.vars.outputs.sha_short }}
      
    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}
      github_short_sha: ${{steps.vars.outputs.sha_short}}
      
  deploy: 
    runs-on: ubuntu-latest
    needs: build 
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    name: Deploy ${{ inputs.container_name}}

    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
      
      - name: Pull the images 
        shell: bash
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_IP }} << 'EOF'
            aws ecr-public get-login-password --region ${{secrets.REGION}} | docker login --username AWS --password-stdin ${{ needs.build.outputs.ecr_registry }}

            cd ~/pinterest/pinterest

            TAG=${{ needs.build.outputs.github_short_sha }}

            PREVIOUS_CONTAINER=$(docker ps -aqf "name=${{inputs.service_name}}")
            PREVIOUS_IMAGE=$(docker images -q --filter "reference=${{ needs.build.outputs.ecr_registry }}/${{secrets.REPOSITORY_ALIAS}}/${{ secrets.ECR_REPOSITORY }}")
            
            sudo mkdir -p /etc/pinterest
            sudo sh -c 'cat > /etc/pinterest/${{ inputs.service_name }}.env <<EOF 
          ${{ secrets.CONTAINER_ENV_VARIABLES }} 
          EOF'

            sudo chown :sudo /etc/pinterest/${{inputs.service_name}}.env
            sudo chmod 660 /etc/pinterest/${{inputs.service_name}}.env

            # this scales up to two services reusing the existing container (older version) and pulling the latest image for the new container
            FRONTEND_TAG=$TAG BACKEND_TAG=$TAG docker compose -f ec2-compose.yaml --env-file /etc/pinterest/${{inputs.service_name}}.env up ${{inputs.service_name}} -d --scale ${{ inputs.service_name}}=2 --no-recreate --no-deps 

            # wait for the container to start
            sleep 30
            
            # cleans up old container and image 
            docker container rm -f $PREVIOUS_CONTAINER || true
            docker rmi -f $PREVIOUS_IMAGE || true


            FRONTEND_TAG=$TAG BACKEND_TAG=$TAG docker compose -f ec2-compose.yaml --env-file /etc/pinterest/${{inputs.service_name}}.env up ${{inputs.service_name}} -d --scale ${{ inputs.service_name}}=1  --no-recreate --no-deps 

            NGINX_CONTAINER=$(docker ps -aqf "name=nginx_proxy")

            docker exec $NGINX_CONTAINER nginx -s reload
          EOF


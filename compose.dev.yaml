services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: pinterest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d pinterest"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: always
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend: 
    build:
      context: .
      dockerfile: ./apps/server/DockerfileBuild
    container_name: server
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "4000:4000"
    command: >
      sh -c "
      npm run migration -- --schema ./dist/packages/schema/prisma/schema.prisma  && 
      npm run start:prod
      "
    env_file:
      - ./apps/server/.env
    environment:
      - REDIS_URI=redis://redis:6379
      - DATABASE_URL=postgres://user:12345@postgres:5432/pinterest
      
  frontend: 
    container_name: web 
    build: 
      context: .
      dockerfile: ./apps/web/Dockerfile
      args:
        - API_URL=http://backend:4000
    depends_on:
      - backend
    ports:
      - "3000:3000"    
    env_file:
      - ./apps/web/.env
    environment:
      - API_URL="http://backend:4000"
  
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    ports:
      - "8080:80"   # Expose NGINX on port 80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

volumes:
  postgres_data:
  redis_data:
